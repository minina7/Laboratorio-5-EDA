public class BST<Key extends Comparable<Key>, Value> {
    private class Node {
        Key key;
        Value value;
        Node left, right;

        Node(Key key, Value value) {
            this.key = key;
            this.value = value;
        }
    }

    private Node root;

    public void put(Key key, Value value) {
        root = put(root, key, value);
    }

    private Node put(Node node, Key key, Value value) {
        if (node == null) return new Node(key, value);
        int cmp = key.compareTo(node.key);
        if (cmp < 0) node.left = put(node.left, key, value);
        else if (cmp > 0) node.right = put(node.right, key, value);
        else node.value = value;
        return node;
    }

    public Value get(Key key) {
        Node node = get(root, key);
        if (node == null) return null;
        return node.value;
    }

    private Node get(Node node, Key key) {
        if (node == null) return null;
        int cmp = key.compareTo(node.key);
        if (cmp < 0) return get(node.left, key);
        else if (cmp > 0) return get(node.right, key);
        else return node;
    }

    public boolean contains(Key key) {
        return get(key) != null;
    }

    public void delete(Key key, Value value) {
        root = delete(root, key, value);
    }

    private Node delete(Node node, Key key, Value value) {
        if (node == null) return null;

        int cmp = key.compareTo(node.key);
        if (cmp < 0) node.left = delete(node.left, key, value);
        else if (cmp > 0) node.right = delete(node.right, key, value);
        else {
            if (!node.value.equals(value)) return node;
            if (node.left == null) return node.right;
            if (node.right == null) return node.left;
            Node min = min(node.right);
            node.key = min.key;
            node.value = min.value;
            node.right = delete(node.right, min.key, min.value);
        }
        return node;
    }

    private Node min(Node node) {
        if (node.left == null) return node;
        return min(node.left);
    }

    public Key successorKey(Key key) {
        Node succ = null;
        Node current = root;
        while (current != null) {
            int cmp = key.compareTo(current.key);
            if (cmp < 0) {
                succ = current;
                current = current.left;
            } else {
                current = current.right;
            }
        }
        return succ == null ? null : succ.key;
    }
}
